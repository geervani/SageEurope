Ext.data.JsonP.Ext_Router({"tagname":"class","name":"Ext.Router","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":true,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{"private":true},"private":true,"id":"class-Ext.Router","members":{"cfg":[],"property":[],"method":[{"name":"setAppInstance","tagname":"method","owner":"Ext.Router","meta":{},"id":"method-setAppInstance"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":95,"files":[{"filename":"Router.js","href":"Router.html#Ext-Router"}],"html_meta":{"private":null},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Router.html#Ext-Router' target='_blank'>Router.js</a></div></pre><div class='doc-contents'><p class='private'><strong>NOTE</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p><p>Restores compatibility for the old <code>Ext.Router.draw</code> syntax. This needs to be here because apps often include\n<em>routes.js</em> just after <em>app.js</em>, so this is our only opportunity to hook this in. There is a small piece of code\ninside Application's onDependenciesLoaded that sets up the other end of this.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-setAppInstance' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Router'>Ext.Router</span><br/><a href='source/Router.html#Ext-Router-method-setAppInstance' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Router-method-setAppInstance' class='name expandable'>setAppInstance</a>( <span class='pre'>app</span> )</div><div class='description'><div class='short'>Application's onDependenciesLoaded has a deprecated-wrapped line that calls this. ...</div><div class='long'><p>Application's onDependenciesLoaded has a deprecated-wrapped line that calls this. Basic idea is that once an\napp has been instantiated we set that at <a href=\"#!/api/Ext.Router\" rel=\"Ext.Router\" class=\"docClass\">Ext.Router</a>'s <code>appInstance</code> and then redirect any calls to\n<a href=\"#!/api/Ext.app.Router-method-draw\" rel=\"Ext.app.Router-method-draw\" class=\"docClass\">Ext.Router.draw</a> to that app's Router. We keep a <code>drawStack</code> above so that we can call <a href=\"#!/api/Ext.app.Router-method-draw\" rel=\"Ext.app.Router-method-draw\" class=\"docClass\">Ext.Router.draw</a> one or\nmore times before the application is even instantiated and it will simply link it up once everything is\npresent.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>app</span> : Object<div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>"});